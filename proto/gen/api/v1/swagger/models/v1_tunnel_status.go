// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TunnelStatus -> Pending -> Ready/Error
//
// swagger:model v1TunnelStatus
type V1TunnelStatus struct {

	// agh
	Agh *V1AdGuardHomeStatus `json:"agh,omitempty"`

	// details
	Details string `json:"details,omitempty"`

	// state
	State *TunnelStatusState `json:"state,omitempty"`

	// wg
	Wg *V1WireGuardStatus `json:"wg,omitempty"`
}

// Validate validates this v1 tunnel status
func (m *V1TunnelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TunnelStatus) validateAgh(formats strfmt.Registry) error {
	if swag.IsZero(m.Agh) { // not required
		return nil
	}

	if m.Agh != nil {
		if err := m.Agh.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agh")
			}
			return err
		}
	}

	return nil
}

func (m *V1TunnelStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *V1TunnelStatus) validateWg(formats strfmt.Registry) error {
	if swag.IsZero(m.Wg) { // not required
		return nil
	}

	if m.Wg != nil {
		if err := m.Wg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wg")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 tunnel status based on the context it is used
func (m *V1TunnelStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TunnelStatus) contextValidateAgh(ctx context.Context, formats strfmt.Registry) error {

	if m.Agh != nil {
		if err := m.Agh.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agh")
			}
			return err
		}
	}

	return nil
}

func (m *V1TunnelStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *V1TunnelStatus) contextValidateWg(ctx context.Context, formats strfmt.Registry) error {

	if m.Wg != nil {
		if err := m.Wg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TunnelStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TunnelStatus) UnmarshalBinary(b []byte) error {
	var res V1TunnelStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
