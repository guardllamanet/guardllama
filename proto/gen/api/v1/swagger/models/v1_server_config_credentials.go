// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ServerConfigCredentials v1 server config credentials
//
// swagger:model v1ServerConfigCredentials
type V1ServerConfigCredentials struct {

	// api
	API *CredentialsAPI `json:"api,omitempty"`

	// jwt
	Jwt *CredentialsJwt `json:"jwt,omitempty"`
}

// Validate validates this v1 server config credentials
func (m *V1ServerConfigCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServerConfigCredentials) validateAPI(formats strfmt.Registry) error {
	if swag.IsZero(m.API) { // not required
		return nil
	}

	if m.API != nil {
		if err := m.API.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfigCredentials) validateJwt(formats strfmt.Registry) error {
	if swag.IsZero(m.Jwt) { // not required
		return nil
	}

	if m.Jwt != nil {
		if err := m.Jwt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwt")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 server config credentials based on the context it is used
func (m *V1ServerConfigCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJwt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServerConfigCredentials) contextValidateAPI(ctx context.Context, formats strfmt.Registry) error {

	if m.API != nil {
		if err := m.API.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfigCredentials) contextValidateJwt(ctx context.Context, formats strfmt.Registry) error {

	if m.Jwt != nil {
		if err := m.Jwt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ServerConfigCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ServerConfigCredentials) UnmarshalBinary(b []byte) error {
	var res V1ServerConfigCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
