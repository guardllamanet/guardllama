// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VpnPortRangeProtocol - TCP: buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
// buf:lint:ignore ENUM_VALUE_PREFIX
//   - UDP: buf:lint:ignore ENUM_VALUE_PREFIX
//
// swagger:model VpnPortRangeProtocol
type VpnPortRangeProtocol string

func NewVpnPortRangeProtocol(value VpnPortRangeProtocol) *VpnPortRangeProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VpnPortRangeProtocol.
func (m VpnPortRangeProtocol) Pointer() *VpnPortRangeProtocol {
	return &m
}

const (

	// VpnPortRangeProtocolTCP captures enum value "TCP"
	VpnPortRangeProtocolTCP VpnPortRangeProtocol = "TCP"

	// VpnPortRangeProtocolUDP captures enum value "UDP"
	VpnPortRangeProtocolUDP VpnPortRangeProtocol = "UDP"
)

// for schema
var vpnPortRangeProtocolEnum []interface{}

func init() {
	var res []VpnPortRangeProtocol
	if err := json.Unmarshal([]byte(`["TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpnPortRangeProtocolEnum = append(vpnPortRangeProtocolEnum, v)
	}
}

func (m VpnPortRangeProtocol) validateVpnPortRangeProtocolEnum(path, location string, value VpnPortRangeProtocol) error {
	if err := validate.EnumCase(path, location, value, vpnPortRangeProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vpn port range protocol
func (m VpnPortRangeProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVpnPortRangeProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vpn port range protocol based on context it is used
func (m VpnPortRangeProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
