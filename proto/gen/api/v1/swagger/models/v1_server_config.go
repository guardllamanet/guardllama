// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ServerConfig v1 server config
//
// swagger:model v1ServerConfig
type V1ServerConfig struct {

	// cluster
	Cluster *ServerConfigCluster `json:"cluster,omitempty"`

	// credentials
	Credentials *V1ServerConfigCredentials `json:"credentials,omitempty"`

	// debug
	Debug bool `json:"debug,omitempty"`

	// manager
	Manager *ServerConfigImage `json:"manager,omitempty"`

	// wg
	Wg *ServerConfigImage `json:"wg,omitempty"`
}

// Validate validates this v1 server config
func (m *V1ServerConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServerConfig) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfig) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfig) validateManager(formats strfmt.Registry) error {
	if swag.IsZero(m.Manager) { // not required
		return nil
	}

	if m.Manager != nil {
		if err := m.Manager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manager")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfig) validateWg(formats strfmt.Registry) error {
	if swag.IsZero(m.Wg) { // not required
		return nil
	}

	if m.Wg != nil {
		if err := m.Wg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wg")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 server config based on the context it is used
func (m *V1ServerConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManager(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ServerConfig) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfig) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {
		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfig) contextValidateManager(ctx context.Context, formats strfmt.Registry) error {

	if m.Manager != nil {
		if err := m.Manager.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manager")
			}
			return err
		}
	}

	return nil
}

func (m *V1ServerConfig) contextValidateWg(ctx context.Context, formats strfmt.Registry) error {

	if m.Wg != nil {
		if err := m.Wg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ServerConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ServerConfig) UnmarshalBinary(b []byte) error {
	var res V1ServerConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
