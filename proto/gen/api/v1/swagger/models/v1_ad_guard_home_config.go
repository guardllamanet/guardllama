// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1AdGuardHomeConfig v1 ad guard home config
//
// swagger:model v1AdGuardHomeConfig
type V1AdGuardHomeConfig struct {

	// block lists
	BlockLists []*AdGuardHomeConfigBlockList `json:"block_lists"`

	// filtering enabled
	FilteringEnabled bool `json:"filtering_enabled,omitempty"`
}

// Validate validates this v1 ad guard home config
func (m *V1AdGuardHomeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockLists(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AdGuardHomeConfig) validateBlockLists(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockLists) { // not required
		return nil
	}

	for i := 0; i < len(m.BlockLists); i++ {
		if swag.IsZero(m.BlockLists[i]) { // not required
			continue
		}

		if m.BlockLists[i] != nil {
			if err := m.BlockLists[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block_lists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("block_lists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 ad guard home config based on the context it is used
func (m *V1AdGuardHomeConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockLists(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AdGuardHomeConfig) contextValidateBlockLists(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BlockLists); i++ {

		if m.BlockLists[i] != nil {
			if err := m.BlockLists[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block_lists" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("block_lists" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AdGuardHomeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AdGuardHomeConfig) UnmarshalBinary(b []byte) error {
	var res V1AdGuardHomeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
